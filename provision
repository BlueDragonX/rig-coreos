#!/bin/bash
test "$(whoami)" != "root" && exec sudo -n -E "$0" "$@"

set -e
VERSION=${VERSION:-$2}
BUILDER=${PACKER_BUILDER_TYPE:-$1}
CHANNEL=${CHANNEL:-$3}
CHANNEL=${CHANNEL:-stable}

case "$BUILDER" in
amazon-*)
	ENV=aws
	;;
*)
	ENV=metal
	;;
esac

TMP=/tmp
FILES="$TMP/files"
TOOLS="$TMP/tools"
ROOT=$(mktemp -d coreos-XXXX)
DISK=
OEM=

die() {
	echo "$@"
	exit 1
}

check_vars() {
	test -z "$VERSION" || die "version is missing"
	test -z "$PACKER_BUILDER_TYPE" || die "builder is missing"
}

prepare_tools() {
	tar -xf "$FILES/tools.tar.xz" -C "$(dirname "$TOOLS")"
}

prepare_env_metal() {
	true
}

prepare_env_aws() {
	cp "$FILES/amazon/sources.list" /etc/apt/sources.list
	apt-get update -y
	apt-get install -y ec2-api-tools ec2-ami-tools kpartx parted
}

prepare_env() {
	case "$ENV" in
	aws)
		prepare_env_aws "$@"
		;;
	metal)
		prepare_env_metal "$@"
		;;
	esac
}

prepare_disk_metal() {
	DISK=$(find /dev -maxdepth 1 -regextype posix-extended -regex '^/dev/(s|v|xv)da' | sort | head -n1)
}

prepare_disk_aws() {
	IMAGE="/tmp/coreos.bin"
	truncate -s 9G "$IMAGE"
	DISK=$(losetup -f --show "$IMAGE")
	OEM=ami
}

prepare_disk() {
	case "$ENV" in
	aws)
		prepare_disk_aws "$@"
		;;
	metal)
		prepare_disk_metal "$@"
		;;
	esac
}

write_disk() {
	local install="$TMP/coreos-install"
	local cloud="$FILES/$ENV/cloud-config"
	wget https://raw.github.com/coreos/init/master/bin/coreos-install -O "$install"
	sed -i 's/blockdev --rereadpt/partprobe/g' "$install"
	if [[ -e "$cloud" ]]; then
		bash "$install" -o "$OEM" -d "$DISK" -V "$VERSION" -C "$CHANNEL" -c "$cloud"
	else
		bash "$install" -o "$OEM" -d "$DISK" -V "$VERSION" -C "$CHANNEL"
	fi
}

cleanup_disk_metal() {
	true
}

cleanup_disk_aws() {
	losetup -d "$DISK"
}

cleanup_disk() {
	case "$ENV" in
	aws)
		cleanup_disk_aws
		;;
	metal)
		cleanup_disk_metal
		;;
	esac
}

mount_tree() {
	mkdir -p "$ROOT"
	"$TOOLS/coreos-fs" mount "$DISK" "$ROOT"
}

update_tree_aws() {
	local etc_units="$ROOT/etc/systemd/system"
	local lib_units="$ROOT/lib/systemd/system"
	local scripts="$ROOT/lib/coreos"
	install -m 0644 -o root -g root "$FILES/amazon/var.mount" "$lib_units/var.mount"
	install -m 0644 -o root -g root "$FILES/amazon/create-var.service" "$lib_units/create-var.service"
	install -m 0755 -o root -g root "$FILES/amazon/create_var" "$scripts/create_var"
	ln -s "/dev/null" "$etc_units/update-engine.service"
	ln -s "/dev/null" "$etc_units/update-engine-reboot-manager.service"
}

update_tree_metal() {
	mkdir -p "$ROOT/home/core/.ssh"
	cp "$FILES/metal/id_rsa.pub" "$ROOT/home/core/.ssh/authorized_keys"
}

update_tree() {
	case "$ENV" in
	aws)
		update_tree_aws
		;;
	metal)
		update_tree_metal
		;;
	esac
}

unmount_tree() {
	"$TOOLS/coreos-fs" umount "$DISK"
}

echo ">> Provisioning for builder $BUILDER"
echo "-- Preparing tools ..."
prepare_tools
echo "-- Preparing environment ..."
prepare_env
echo "-- Preparing disk ..."
prepare_disk
echo "-- Writing disk $DISK ..."
write_disk
echo " - Mounting filesystem tree ..."
mount_tree
echo "-- Updating filesystem tree ..."
update_tree
echo "-- Unmounting filesystem tree ..."
unmount_tree
echo "-- Cleaning up disks ..."
cleanup_disk
echo "** Provisioning complete!"
